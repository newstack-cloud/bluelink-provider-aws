package iam

import (
	"github.com/newstack-cloud/bluelink/libs/blueprint/core"
	"github.com/newstack-cloud/bluelink/libs/blueprint/provider"
)

func iamSAMLProviderResourceSchema() *provider.ResourceDefinitionsSchema {
	return &provider.ResourceDefinitionsSchema{
		Type:        provider.ResourceDefinitionsSchemaTypeObject,
		Label:       "IAMSAMLProviderDefinition",
		Description: "The definition of an AWS IAM SAML provider.",
		Attributes: map[string]*provider.ResourceDefinitionsSchema{
			"name": {
				Type:        provider.ResourceDefinitionsSchemaTypeString,
				Description: "The name of the SAML provider to create.",
				FormattedDescription: "The name of the SAML provider to create. " +
					"This parameter allows (through its regex pattern) a string of characters consisting of upper and lowercase alphanumeric " +
					"characters with no spaces. You can also include any of the following characters: _+=,.@-",
				Pattern:      `[\w+=,.@-]+`,
				MinLength:    1,
				MaxLength:    128,
				MustRecreate: true,
				Nullable:     true,
				Examples: []*core.MappingNode{
					core.MappingNodeFromString("MySAMLProvider"),
					core.MappingNodeFromString("ExampleCorpProvider"),
					core.MappingNodeFromString("prod-saml-provider"),
				},
			},
			"samlMetadataDocument": {
				Type:        provider.ResourceDefinitionsSchemaTypeString,
				Description: "An XML document generated by an identity provider (IdP) that supports SAML 2.0.",
				FormattedDescription: "An XML document generated by an identity provider (IdP) that supports SAML 2.0. " +
					"The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML " +
					"authentication response (assertions) that are received from the IdP. You must generate the metadata document using " +
					"the identity management software that is used as your organization's IdP.",
				MinLength: 1000,
				MaxLength: 10000000,
				Nullable:  true,
				Examples: []*core.MappingNode{
					core.MappingNodeFromString("<?xml version=\"1.0\"?><EntityDescriptor>...</EntityDescriptor>"),
				},
			},
			"tags": {
				Type:        provider.ResourceDefinitionsSchemaTypeArray,
				Description: "A list of tags that are attached to the specified IAM SAML provider.",
				FormattedDescription: "A list of tags that are attached to the specified IAM SAML provider. " +
					"For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.",
				Items: &provider.ResourceDefinitionsSchema{
					Type:  provider.ResourceDefinitionsSchemaTypeObject,
					Label: "Tag",
					Attributes: map[string]*provider.ResourceDefinitionsSchema{
						"key": {
							Type:        provider.ResourceDefinitionsSchemaTypeString,
							Description: "The key name of the tag.",
							MinLength:   1,
							MaxLength:   128,
							Pattern:     `[\w+=,.@-]+`,
						},
						"value": {
							Type:        provider.ResourceDefinitionsSchemaTypeString,
							Description: "The value for the tag.",
							MinLength:   0,
							MaxLength:   256,
							Pattern:     `[\w+=,.@-]*`,
						},
					},
					Required: []string{"key", "value"},
				},
				MaxLength: 50,
				Nullable:  true,
			},

			// Computed fields
			"arn": {
				Type:        provider.ResourceDefinitionsSchemaTypeString,
				Description: "The Amazon Resource Name (ARN) of the IAM SAML provider.",
				FormattedDescription: "The Amazon Resource Name (ARN) of the IAM SAML provider. " +
					"This is a computed field that is automatically set after the SAML provider is created.",
				Computed: true,
			},
			"samlProviderUUID": {
				Type:        provider.ResourceDefinitionsSchemaTypeString,
				Description: "The UUID of the SAML provider.",
				FormattedDescription: "The UUID of the SAML provider. " +
					"This is a computed field that is automatically set after the SAML provider is created.",
				Computed: true,
			},
		},
	}
}
