# Celerity Plugin release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Install Plugin Docgen Tool
        run: |
          go install github.com/two-hundred/celerity/tools/plugin-docgen/cmd/celerity-plugin-docgen@latest
      - name: Build Provider for Docgen
        run: |
          VERSION=$(grep -o 'PluginVersion: *"[^"]*"' main.go | sed 's/PluginVersion: *"\(.*\)"/\1/')
          mkdir -p /tmp/celerity/plugins/providers/two-hundred/aws/$VERSION
          go build -o /tmp/celerity/plugins/providers/two-hundred/aws/$VERSION/plugin main.go
      - name: Generate Plugin JSON Docs
        run: |
          celerity-plugin-docgen -plugin=two-hundred/aws
        env:
          CELERITY_PLUGIN_DOCGEN_PLUGIN_LOG_FILE_ROOT_DIR: /tmp/celerity/plugins/logs
          CELERITY_DEPLOY_ENGINE_PLUGIN_PATH: /tmp/celerity/plugins
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}